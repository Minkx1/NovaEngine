PyGameEngine V1.3.0 Documentation
=================================

1. Overview
-----------
PyGameEngine is a lightweight Python library to simplify 2D game creation with Pygame.

2. Installation
---------------
- git clone ...
- Requirements: Python 3.x, pygame

3. Engine
---------
Class: PyGameEngine
- init(window_size, app_name, icon_path, fps)
- main() decorator
- run()
- run_scene(scene)
- MouseClicked(button=0)
- KeyPressed(key)

4. Scenes
---------
Class: Scene
- __init__(engine)
- add_sprite(list_of_sprites)
- sprites() context manager
- init_scene() decorator
- update_all()
- draw_all()

5. Sprites & Player
-------------------
Class: Sprite
- __init__(engine, img_path, Width=None, Height=None, solid=False)
- draw(), set_position(x, y), place_centered(x, y), move(dx, dy), scale(W,H), rotate(angle)

Class: Player(Sprite)
- __init__(engine, img_path, x, y, width, height, movement_type)
- update()

6. Movements
------------
Class: PlatformerMovement(speed, gravity, jump_force)
- update(engine, keys, solids, rect)

Class: TopDownMovement(speed)
- update(engine, keys, solids, rect)

7. UI Elements
--------------
Class: Button(Sprite)
- draw() -> returns True if clicked

8. Utilities
------------
Colors: WHITE, BLACK, RED, GREEN, BLUE
render_text(screen, text, x, y, font, size, color)
fill_background(engine, color)

9. Example Template (using additional class Bullet)
-------------------

{
    """ ===== template.py ===== """

    import pygame, math
    import PyGameEngine as pge

    from bullet import Bullet

    """ --- 1. Initialize PyGameEngine --- """

    # variables and others
    SCREEN_W, SCREEN_H = 900, 600 
    PLAYER_SPEED = 5
    bullet = None

    Engine = pge.PyGameEngine().init(window_size=(900, 600))

    """ --- 2. Create Scene, Add assets and Initialize function --- """

    # Scene1
    Scene1 = pge.Scene(Engine)

    with Scene1.sprites():
        player = pge.Sprite(
            engine=Engine,img_path="assets/player.png",
            width=120, height=103
        ).place_centered(SCREEN_W/2, SCREEN_H/2)

    @Scene1.init_scene()
    def scene1():
        pge.fill_background(engine=Engine, color=pge.Colors.WHITE)

        # PLAYER LOGIC
        @player.set_update
        def player_update(self):
            global bullet
            # Moving and collision
            dx, dy = 0, 0
            if Engine.KeyHold(pygame.K_w): dy -= PLAYER_SPEED
            if Engine.KeyHold(pygame.K_s): dy += PLAYER_SPEED
            if Engine.KeyHold(pygame.K_a): dx -= PLAYER_SPEED
            if Engine.KeyHold(pygame.K_d): dx += PLAYER_SPEED

            # X
            self.move(dx, dy)
            for s in Scene1.solids:
                if self.collide(s):
                    # відкотимо назад по X
                    self.move(-dx, 0)
                    dx = 0
                    break

            # Y
            self.move(0, dy)
            for s in Scene1.solids:
                if self.collide(s):
                    # відкотимо назад по Y
                    self.move(0, -dy)
                    dy = 0
                    break

            mouse_x,mouse_y = pygame.mouse.get_pos()
            px,py = self.rect.center[0], self.rect.center[1]
            
            mouse_angle_rad = math.atan2(mouse_y - py, mouse_x - px)
            angle_to_mouse = math.degrees(mouse_angle_rad)
            self.rotate(angle_to_mouse)
            if Engine.MouseClicked(): bullet = Bullet(Engine, 'assets/bullet.png', px, py, 8,8)
            if bullet: bullet.update()

            self.draw()

        Scene1.update()

    """ --- 3. Initialize Main function with all your project logics --- """

    Engine.run(globals())}


10. Notes
---------
- Solid objects are automatically tracked in Scene.solids
- Movement types are interchangeable for Player
- Scenes can have multiple sprites and UI elements

